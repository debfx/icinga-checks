#!/usr/bin/env python3

# Nagios/Icinga plugin for checking systemd services status.
#
# Copyright (C) 2017 Felix Geyer <debfx@fobos.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 or (at your option)
# version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import subprocess
import sys

RESULT_OK = 0
RESULT_WARNING = 1
RESULT_CRITICAL = 2
RESULT_UNKNOWN = 3

RESULT_STRING = {
    RESULT_OK: "OK",
    RESULT_WARNING: "WARNING",
    RESULT_CRITICAL: "CRITICAL",
    RESULT_UNKNOWN: "UNKNOWN",
}


def run_process(cmd):
    try:
        output = subprocess.check_output(cmd, universal_newlines=True)
        return (0, output.strip())
    except subprocess.CalledProcessError as e:
        return (e.returncode, e.output.strip())


def check_systemd_status():
    status_result = run_process(["systemctl", "is-system-running"])

    check_result = [RESULT_UNKNOWN, status_result[1]]

    if status_result[0] != 0:
        check_result[0] = RESULT_WARNING

        if status_result[1] == "degraded":
            failed_output = run_process(["systemctl", "list-units", "--state=failed"])
            if failed_output[1]:
                check_result[1] += "\n\n" + failed_output[1]
    else:
        check_result[0] = RESULT_OK

    return check_result


def parse_properties(lines):
    properties = {}

    for line in lines:
        pos = line.find("=")
        if pos > 0:
            properties[line[:pos]] = line[pos + 1 :]

    return properties


def check_service_status(unit):
    active_result = run_process(["systemctl", "show", "-p", "ActiveState,SubState", unit])
    properties = parse_properties(active_result[1].splitlines())

    if active_result[0] == 0 and "ActiveState" in properties and "SubState" in properties:
        check_result = [RESULT_UNKNOWN, "{} {} ({})".format(unit, properties["ActiveState"], properties["SubState"])]

        if properties["ActiveState"] == "active" and properties["SubState"] == "running":
            check_result[0] = RESULT_OK
        else:
            check_result[0] = RESULT_CRITICAL
            status_result = run_process(["systemctl", "status", unit])
            if status_result[1]:
                check_result[1] += "\n\n" + status_result[1]
    else:
        check_result = [RESULT_UNKNOWN, "{} unknown\n\n{}".format(unit, active_result[1])]

    return check_result


def main():
    os.environ["LC_ALL"] = "C"

    try:
        if len(sys.argv) == 2:
            result = check_service_status(sys.argv[1])
        else:
            result = check_systemd_status()
    except Exception as e:
        result = (RESULT_UNKNOWN, "Exception {}\n\n{}".format(e.__class__.__name__, e))

    print("SYSTEMD {}: {}".format(RESULT_STRING.get(result[0], RESULT_STRING[RESULT_UNKNOWN]), result[1]))
    sys.exit(result[0])


if __name__ == "__main__":
    main()
