#!/usr/bin/env python3

# Nagios/Icinga plugin for checking systemd services status.
#
# Copyright (C) 2017 Felix Geyer <debfx@fobos.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 or (at your option)
# version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import os
import subprocess
import sys
from enum import Enum
from typing import NoReturn


class NagiosStatus(Enum):
    OK = 0
    WARNING = 1
    CRITICAL = 2
    UNKNOWN = 3


CHECK_NAME = "SYSTEMD"


def nagios_exit(status: NagiosStatus, msg: str) -> NoReturn:
    print(f"{CHECK_NAME} {status.name} - {msg}")
    sys.exit(status.value)


def run_process(cmd):
    try:
        output = subprocess.check_output(cmd, universal_newlines=True)
        return (0, output.strip())
    except subprocess.CalledProcessError as e:
        return (e.returncode, e.output.strip())


def check_systemd_status():
    system_running_result = run_process(["systemctl", "is-system-running"])

    status = NagiosStatus.UNKNOWN
    message = system_running_result[1]

    if system_running_result[0] != 0:
        status = NagiosStatus.WARNING

        if system_running_result[1] == "degraded":
            failed_output = run_process(["systemctl", "list-units", "--state=failed"])
            if failed_output[1]:
                message += "\n\n" + failed_output[1]
    else:
        status = NagiosStatus.OK

    return status, message


def parse_properties(lines):
    properties = {}

    for line in lines:
        pos = line.find("=")
        if pos > 0:
            properties[line[:pos]] = line[pos + 1 :]

    return properties


def check_service_status(unit, check_running):
    unit_state_result = run_process(["systemctl", "show", "-p", "ActiveState,SubState", unit])
    properties = parse_properties(unit_state_result[1].splitlines())
    status = NagiosStatus.UNKNOWN
    message = ""

    if unit_state_result[0] == 0 and "ActiveState" in properties and "SubState" in properties:
        message = f"{unit} {properties['ActiveState']} ({properties['SubState']})"

        if properties["ActiveState"] == "active" and (not check_running or properties["SubState"] == "running"):
            status = NagiosStatus.OK
        else:
            status = NagiosStatus.CRITICAL
            unit_status_result = run_process(["systemctl", "status", unit])
            if unit_status_result[1]:
                message += "\n\n" + unit_status_result[1]
    else:
        status = NagiosStatus.UNKNOWN
        message = f"{unit} unknown\n\n{unit_state_result[1]}"

    return status, message


def main():
    os.environ["LC_ALL"] = "C"

    parser = argparse.ArgumentParser(description="Icinga plugin for checking systemd status.")
    parser.add_argument(
        "--system",
        action="store_true",
        help="Check the system status. Mutually exclusive with --unit.",
    )
    parser.add_argument(
        "--unit",
        help="Check the specific systemd unit. Mutually exclusive with --system.",
    )
    parser.add_argument(
        "--unit-running",
        action="store_true",
        help="Check that the unit is running on top of being active.",
    )
    args = parser.parse_args()

    if not args.system and not args.unit:
        status = NagiosStatus.UNKNOWN
        message = "One of --system and --unit is required"
    elif args.system and args.unit:
        status = NagiosStatus.UNKNOWN
        message = "--system and --unit are mutually exclusive"
    else:
        try:
            if args.system:
                status, message = check_systemd_status()
            else:
                status, message = check_service_status(args.unit, args.unit_running)
        except Exception as e:
            status = NagiosStatus.UNKNOWN
            message = f"Exception {e.__class__.__name__}\n\n{e}"

    nagios_exit(status, message)


if __name__ == "__main__":
    main()
