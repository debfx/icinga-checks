#!/usr/bin/env python3

# Copyright (c) 2017 Leo Antunes <leo@costela.net>
# Copyright (c) 2020 Felix Geyer <debfx@fobos.de>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


import os
import sys
import glob
import argparse
import logging
from collections import defaultdict

__version__ = '0.1.0'

OK = 0
WARNING = 1
CRITICAL = 2
UNKNOWN = 3

PF_KTHREAD = 0x00200000

def parse_proc_stat(pid):
    with open('/proc/{}/stat'.format(pid)) as f_stat:
        stat_line = f_stat.read().strip()

    # the second field (comm) can contain spaces but is wrapped in parentheses
    # dance around it
    comm_start = stat_line.index('(')
    comm_end = stat_line.rindex(')')

    fields = stat_line[:comm_start-1].split(' ')
    fields.append(stat_line[comm_start+1:comm_end])
    fields += stat_line[comm_end+2:].split(' ')
    return fields


def is_parent_kthread(pid):
    proc_stat = parse_proc_stat(pid)
    parent_pid = int(proc_stat[3])
    if parent_pid == 0:
        return False

    parent_proc_stat = parse_proc_stat(parent_pid)
    return bool(int(parent_proc_stat[8]) & PF_KTHREAD)


def main():
    argparser = argparse.ArgumentParser()
    argparser.add_argument('--version', action='version', version='%(prog)s ' + __version__)
    argparser.add_argument('--quiet', action='store_true', help='no output if nothing found')
    argparser.add_argument('--verbose', action='store_true', help='be verbose about the search process')
    argparser.add_argument('--debug', action='store_true', help='enable debug output for the search process')

    args = argparser.parse_args()

    logger = logging.getLogger(os.path.basename(sys.argv[0]))
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    elif args.verbose:
        logging.basicConfig(level=logging.INFO)
    else:
        logging.basicConfig(level=logging.WARNING)

    needs_reload = defaultdict(set)
    for proc in glob.glob('/proc/[0-9]*'):  # numbers to avoid e.g. /proc/self
        exe = os.path.join(proc, 'exe')
        proc_pid = os.path.basename(proc)
        try:
            with open(os.path.join(proc, 'comm')) as f:
                proc_name = f.read().rstrip('\n')
        except FileNotFoundError:
            continue
        logger.info('checking process %s', proc_name)

        try:
            exe_stat = os.stat(exe)
            exe_target = os.path.realpath(exe)

            # skip special processes spawned by the kernel (like bpfilter_umh)
            # whose executables never exist as a file
            is_kernel_process = is_parent_kthread(proc_pid)

            if exe_stat.st_nlink == 0 and not is_kernel_process and not exe_target.startswith('/memfd:'):
                needs_reload[proc_name].add(proc_pid)
        except FileNotFoundError:
            continue

        try:
            os.chdir(os.path.join(proc, 'map_files'))
        except FileNotFoundError:
            continue

        for map_file in os.listdir('.'):
            # all files in /map_files/ are absolute symlinks, so we don't need abspath()
            try:
                real_map_file_path = os.path.realpath(map_file).replace(' (deleted)', '')
            except OSError:
                # just skip if the file doesn't exist anymore
                continue
            if '.so' not in real_map_file_path or real_map_file_path.startswith('/tmp'):
                logger.debug('skipping non-lib %s', real_map_file_path)
                continue

            try:
                if os.stat(map_file).st_nlink == 0:
                    needs_reload[proc_name].add(proc_pid)
                    logger.info('lib %s has been updated/deleted', real_map_file_path)
                else:
                    logger.debug('lib %s hasn\'t been changed', real_map_file_path)
            except OSError:
                # just skip if the file doesn't exist anymore
                continue
        else:
            logger.debug('skipping kernel process %s', os.path.basename(proc))

    if needs_reload:
        sorted_procs = sorted(needs_reload.keys())
        procs_with_pids = ', '.join(map(lambda x: '{} ({})'.format(x, ', '.join(needs_reload[x])), sorted_procs))
        print('LIBS WARNING - The following processes have libs linked that were upgraded:\n\n' + procs_with_pids)
        exit(WARNING)
    elif not args.quiet:
        print('LIBS OK - No upgraded libs linked in running processes')

    exit(OK)

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print('LIBS UNKNOWN - Exception {}: {}'.format(type(e).__name__, e))
        exit(UNKNOWN)
